import { GemsLogoBase64 } from "@modules/organogram-templates/components/template-view-component/utils";
import html2canvas from "html2canvas";
import jsPDF from "jspdf";

const downloadImage = (blob, fileName) => {
  const fakeLink: any = window.document.createElement("a");
  fakeLink.style = "display:none;";
  fakeLink.download = fileName;

  fakeLink.href = blob;

  document.body.appendChild(fakeLink);
  fakeLink.click();
  document.body.removeChild(fakeLink);

  fakeLink.remove();
};

export const captureAndConvertToPDF = async (setPDFLoading, downloadType) => {
  setPDFLoading(true);
  // Get references to the HTML elements you want to capture
  const elementsToCapture = document.getElementsByClassName("pdfGenarator");
  // Create a new instance of jsPDF
  const pdf: any = new jsPDF("l", "px", "letter");

  // Loop through the elements and capture each one
  for (let i = 0; i < elementsToCapture.length; i++) {
    const element: any = elementsToCapture[i];

    // Use html2canvas to capture the element
    const canvas = await html2canvas(element, {
      scale: 2.5,
      onclone: (clone: any) => {
        clone.querySelector(".animate__fadeIn") &&
          (clone.querySelector(".animate__fadeIn").style.animation = "none");
        clone.querySelector(".allocationBlock").style.overflow = "auto";
        clone.querySelector(".allocationBlock").style.height = "fit-content";
        clone.querySelector(".treeBlock").style.height = "fit-content";
        clone.querySelector(".allocationBlock").style.paddingTop = "20px";
        clone.querySelector(".allocationBlock").style.paddingLeft = "200px";
        clone.querySelector(".allocationBlock").style.paddingRight = "200px";
        clone.querySelector(".allocationBlock").style.paddingBottom = "30px";
        clone.querySelector(".treeTitle").style.overflow = "visible";
        clone.querySelector(".treeTitle").style.height = "fit-content";
        clone.querySelector(".orgchart").style.paddingBottom = "15px";
        clone.querySelector(".dataBlock").style.overflow = "auto";
        clone.querySelector(".dataBlock").style.height = "fit-content";
        clone.querySelector(".dataBlock").style.padding = "20px";
        clone.querySelector(".dataBlock").style.paddingBottom = "30px";
        // clone.querySelector(".orgchart").style.minWidth = "2140px";
      },
    });

    if (i > 0) pdf.addPage();
    // Convert the canvas to an image and add it to the PDF
    const imageData = canvas.toDataURL("image/png");
    if (i === 1 && downloadType === "image-download") {
      downloadImage(imageData, "Organogram With Data");
      break;
    }
    const pdfWidth = pdf.internal.pageSize.getWidth();
    const pdfHeight = pdf.internal.pageSize.getHeight() - 15;

    const imageWidth = canvas.width;
    const imageHeight = canvas.height;
    const ratio = Math.min(pdfWidth / imageWidth, pdfHeight / imageHeight);
    pdf.addImage(
      imageData,
      "PNG",
      0,
      8,
      imageWidth * ratio,
      imageHeight * ratio,
      "",
      "FAST"
    );
  }

  const pageCount = pdf.internal.getNumberOfPages();

  for (let i = 1; i <= pageCount; i++) {
    pdf.setPage(i);
    if (GemsLogoBase64) {
      pdf.addImage(
        GemsLogoBase64,
        "png",
        pdf.internal.pageSize.getWidth() / 2 - 40,
        pdf.internal.pageSize.getHeight() - 11,
        10,
        10
      );
    }
    pdf.setFontSize(8);
    pdf.text(
      `Digitally generated by GEMS`,
      pdf.internal.pageSize.getWidth() / 2 - 30,
      pdf.internal.pageSize.getHeight() - 4
    );
  }

  // For open direct print
  if (downloadType === "print") {
    pdf.autoPrint();
    window.open(pdf.output("bloburl"), "_blank");
  }

  // Save or display the PDF
  if (downloadType === "pdf") {
    pdf.save("Organogram With Data.pdf");
  }
  setPDFLoading(false);
};
